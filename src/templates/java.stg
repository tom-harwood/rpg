delimiters "%","%"

// ** Property Access **

className() ::= <<%"";format="className"%>>

declareDependentVars(node) ::= <<%"";format="declare.dependent.variables"%>>

expectedValue() ::= <<%"";format="expected.value"%>>

grammar() ::= <<%"";format="grammar.name"%>>

tempvar(node) ::= <<temp_%node.hashCode%>>

timestamp() ::=<<%"";format="timestamp"%>>

typename(node) ::=<<%"";format="typename"%>>

varname(node) ::= <<var_%node;format="hashCode"%>>

verifierType() ::= <<%"";format="verifier.type"%>>

version() ::= <<%"";format="version"%>>

// ** Top-Level Template **
classDef(node, computation) ::= <<
/* GENERATED CODE - Edits will be lost
 * Generated by rpg version() %timestamp()% %grammar()%
 */

public class %className()%
{
    public static void main(String[] args) {

        %declareDependentVars(node)%
        %verifierType()% expected = %expectedValue()%;

        %verify(node, computation)%
        System.out.printf("Succeeded: \%s == \%s\n", expected, %varname(node)%);
    }
}
>>

verify(node, computation) ::= <<
%typename(node)% %varname(node)% = %computation%;

if (expected != %varname(node)%) {
    throw new IllegalStateException(String.format("FAILED: \%s != \%s, node \%s", expected, %varname(node)%));
}
>>

simpleBinop(node, operator, lhs,rhs) ::= <<(%lhs% %operator% %rhs%)>>

addInLoop(node, a,b) ::= <<
{
    %declareResultVar(node)% = 0;

    for (int %tempvar(node)% = 0; %tempvar(node)% < %b%; %tempvar(node)%++) {
        %node.resultExp%++;
    }
}
>>

intLiteral(node) ::= <<%node.payload%>>
